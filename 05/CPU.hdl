// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output done
        writeM,          // Write to M? done
        addressM[15],    // Address in data memory (of M) done
        pc[15];          // address of next instruction

    PARTS:
    
    /*
    C ins guide
    15 A or C ins
    14 & 13 useless
    12 M or A
    11 zx
    10 nx
    9 zy
    8 ny
    7 f
    6 no
    5 A
    4 D
    3 M
    2 neg
    1 0
    0 pos
    */



    Not(in=instruction[15], out=NT);
    Not(in=NT, out=T);
    Mux16(a=instruction, b=aout, sel=T, out=w1);
    Or(a=NT, b=instruction[5], out=l1);
    ARegister(in=w1, load=l1, out=A1, out=A2, out=A3);
    //To fill A reg

    And(a=T, b=instruction[4], out=l2);
    DRegister(in=aout, load=l2, out=D1);
    //To fill D reg

    And(a=T, b=instruction[3], out=writeM);
    // To find writeM

    Mux16(a=A1, b=inM, sel=instruction[12], out=yI);
    //To choose between A reg and M reg

    ALU(x=D1, y=yI, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aout, zr=zr, ng=ng);
    Not16(in=aout, out=q7);
    Not16(in=q7, out=outM);
    //ALU operations

    Not16(in=A2, out=w2);
    Not16(in=w2, out[0..14]=addressM);

    And(a=instruction[0], b=instruction[1], out=q0);
    And(a=q0, b=instruction[2], out=b1);
    // j1&j2&j3=b1

    And(a=instruction[1], b=zr, out=b2);
    // j2&zr=b2
    
    And(a=instruction[2], b=ng, out=b3);
    // j1&ng=b3
    
    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);
    And(a=instruction[0], b=nzr, out=q00);
    And(a=q00, b=nng, out=b4);
    // !zr&!ng&j1=b4
    
    Or(a=b1, b=b2, out=q1);
    Or(a=b3, b=b4, out=q2);
    Or(a=q1, b=q2, out=q3);
    And(a=T, b=q3, out=q4);
    // T&(b1||b2||b3||b4)=q4

    Not(in=q4, out=q5);
    PC(in=A3 ,reset=reset, load=q4, inc=q5, out[0..14]=pc);

}
